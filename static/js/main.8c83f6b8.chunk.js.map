{"version":3,"sources":["components/Menu/Menu.js","components/Index/Index.js","components/LoaderCenter/LoaderCenter.js","hooks/useRequest.js","components/MapView/MapView.js","components/NowPage/NowPageMenu.js","components/NowPage/NowPage.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","className","to","type","id","activeClassName","Index","LoaderCenter","style","width","height","role","useRequest","method","url","urlParams","useState","error","setError","undefined","data","setData","loading","setLoading","requestUrl","useMemo","Object","keys","map","key","join","useEffect","rq","XMLHttpRequest","onloadstart","onloadend","onerror","event","ontimeout","onload","JSON","parse","response","SyntaxError","open","send","MapView","geojsonUrl","MapContainer","center","zoom","TileLayer","attribution","GeoJSON","NowPageMenu","layer","setLayer","setMethod","selectedTime","indexFrom","indexTo","index","setIndex","setPeriodFrom","setPeriodTo","period","setPeriod","fromDelta","htmlFor","value","onChange","min","max","step","ev","val","target","now","Math","floor","Date","getNowDate","host","NowPage","from","setFrom","setTo","geojsonurl","console","log","layersets","length","_layer","parseInt","filter","geojson_url","getGeoJsonUrl","date","toLocaleString","getMap","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c83f6b8.chunk.js","sourcesContent":["import React from \"react\"\nimport { NavLink } from \"react-router-dom\"\n\nconst Menu = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container-fluid\">\n                <NavLink to=\"/\" className=\"navbar-brand\">\n                    Meža ugunsbīstamības karte\n                </NavLink>\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#navbarSupportedContent\"\n                    aria-controls=\"navbarSupportedContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div\n                    className=\"collapse navbar-collapse\"\n                    id=\"navbarSupportedContent\"\n                >\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <NavLink\n                                to=\"/map/now\"\n                                activeClassName=\"active\"\n                                className=\"nav-link\"\n                            >\n                                Ugunsbīstamība šobrīd\n                            </NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Menu\n","import React from \"react\"\n\nconst Index = () => {\n    return (\n        <p>\n            Site description goes here!\n        </p>\n    )\n}\n\nexport default Index","import React from \"react\"\n\nconst LoaderCenter = () => {\n    return (\n        <div className=\"text-center\">\n            <div\n                className=\"spinner-grow\"\n                style={{\n                    width: \"3rem\",\n                    height: \"3rem\"\n                }}\n                role=\"status\"\n            >\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n        </div>\n    )\n}\n\nexport default LoaderCenter\n","import { useState, useEffect, useMemo } from \"react\"\n\nconst useRequest = ({ method, url, urlParams }) => {\n    const [error, setError] = useState(false)\n    const [data, setData] = useState(undefined)\n    const [loading, setLoading] = useState(false)\n\n    const requestUrl = useMemo(() => {\n        if (url) {\n            if (urlParams) {\n                return (\n                    url +\n                    \"?\" +\n                    Object.keys(urlParams)\n                        .map((key) => key + \"=\" + urlParams[key])\n                        .join(\"&\"))\n            } else {\n                return url\n            }\n        }\n        else {\n            return null\n        }\n    }, [urlParams, url])\n    \n\n    useEffect(() => {\n        if (requestUrl) {\n            let rq = new XMLHttpRequest()\n            rq.onloadstart = () => {\n                setLoading(true)\n            }\n            rq.onloadend = () => {\n                setLoading(false)\n            }\n            rq.onerror = (event) => {\n                setError(true)\n            }\n            rq.ontimeout = (event) => {\n                setError(true)\n            }\n            rq.onload = (event) => {\n                try {\n                    setData(JSON.parse(rq.response))\n                }\n                catch (SyntaxError) {\n                    setData(rq.response)\n                }\n            }\n            rq.open(method, requestUrl, true)\n            rq.send()\n        }\n    }, [method, requestUrl])\n\n    return [ data, loading, error ]\n}\n\nexport default useRequest","import React from \"react\"\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\"\nimport { LoaderCenter } from \"..\"\nimport { useRequest } from \"../../hooks\"\nimport 'leaflet/dist/leaflet.css';\n\nconst MapView = ({ geojsonUrl }) => {\n    const [data, loading, error] = useRequest({\n        method: \"GET\",\n        url: geojsonUrl,\n    })\n\n    if (loading) return <LoaderCenter />\n\n    if (error) return <div>Notikusi kļūda...</div>\n\n    return (\n        <MapContainer center={[56.946285, 24.105078]} zoom={3} style={{width: \"100%\", height: \"500px\"}}>\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <GeoJSON data={data} />\n        </MapContainer>\n    )\n}\n\nexport default MapView\n","import React, { useState } from \"react\"\n\nconst NowPageMenu = ({\n    layer,\n    setLayer,\n    method,\n    setMethod,\n    selectedTime,\n    indexFrom,\n    indexTo,\n    index,\n    setIndex,\n    setPeriodFrom,\n    setPeriodTo\n}) => {\n    const [period, setPeriod] = useState(\"1h\")\n\n    const fromDelta = {\n        \"1h\": 3600,\n        \"4h\": 4 * 3600,\n        \"12h\": 12 * 3600,\n        \"24h\": 24 * 3600,\n        \"2d\": 2 * 86400,\n        \"7d\": 7 * 86400,\n    }\n\n    const handlePeriodChange = (ev) => {\n        const val = ev.target.value\n        const now = Math.floor(Date.now() / 1000)\n        setPeriodFrom(now - fromDelta[val])\n        setPeriodTo(now)\n        setPeriod(val)\n    }\n\n    return (\n        <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n                <label htmlFor=\"layer\">Slānis</label>\n                <select\n                    id=\"layer\"\n                    className=\"form-select\"\n                    value={layer}\n                    onChange={setLayer}\n                >\n                    <option value=\"total\">Kopēja bīstamība</option>\n                    <option value=\"ignition\">\n                        Ugunsgrēka izcēlšanās bīstamība\n                    </option>\n                    <option value=\"spread\">\n                        Ugunsgrēka izplatības bīstamība\n                    </option>\n                </select>\n            </li>\n            <li className=\"list-group-item\">\n                <label htmlFor=\"method\">Metode</label>\n                <select\n                    id=\"method\"\n                    className=\"form-select\"\n                    value={method}\n                    onChange={setMethod}\n                >\n                    <option value=\"jac\">JAC</option>\n                    <option value=\"ahp\">AHP</option>\n                    <option value=\"mlc\">MLC</option>\n                </select>\n            </li>\n            <li className=\"list-group-item\">\n                <label htmlFor=\"index\" className=\"form-label\">\n                    Datums un laiks: {selectedTime}\n                </label>\n                <input\n                    type=\"range\"\n                    className=\"form-range\"\n                    id=\"index\"\n                    min={indexFrom}\n                    max={indexTo}\n                    step={1}\n                    value={index}\n                    onChange={setIndex}\n                />\n            </li>\n            <li className=\"list-group-item\">\n                <label htmlFor=\"period\" className=\"form-label\">\n                    Periods\n                </label>\n                <select\n                    id=\"period\"\n                    className=\"form-select\"\n                    value={period}\n                    onChange={handlePeriodChange}\n                >\n                    <option value=\"1h\">pēdējā 1h</option>\n                    <option value=\"4h\">pēdējās 4h</option>\n                    <option value=\"12h\">pēdējās 12h</option>\n                    <option value=\"24h\">pēdējās 24h</option>\n                    <option value=\"2d\">pēdējās 2d</option>\n                    <option value=\"7d\">pēdējās 7d</option>\n                </select>\n            </li>\n        </ul>\n    )\n}\n\nexport default NowPageMenu\n","import React, { useState } from \"react\"\nimport { LoaderCenter, MapView } from \"..\"\nimport { useRequest } from \"../../hooks\"\nimport NowPageMenu from \"./NowPageMenu\"\n\nconst getNowDate = () => {\n    return Math.floor(Date.now() / 1000)\n}\n\nconst host = \"http://20.113.89.5\"\n\nconst NowPage = () => {\n    const [from, setFrom] = useState(getNowDate() - 86400 * 2)\n    const [to, setTo] = useState(getNowDate())\n    const [index, setIndex] = useState(0)\n    const [layer, setLayer] = useState(\"ignition\")\n    const [method, setMethod] = useState(\"jac\")\n\n    const [data, loading, error] = useRequest({\n        method: \"GET\",\n        url: host + \"/api/get/period\",\n        urlParams: {\n            from,\n            to,\n        },\n    })\n\n    if (loading) return <LoaderCenter />\n\n    if (error) return <div>Notikusi kļūda...</div>\n\n    const getGeoJsonUrl = () => {\n        if (layer && data && method) {\n            console.log(layer, method)\n            if (data.layersets.length === 0) {\n                return \"no-layers\"\n            }\n\n            const layers = data.layersets[parseInt(index)][\"layers\"][layer]            \n\n            const _layer = layers.filter((val) => {\n                console.log(val)\n                return val.method === method\n            })\n\n            if (_layer.length > 0) {\n                return host + _layer[0].geojson_url\n            } else {\n                return \"not-found\"\n            }\n        } else {\n            return null\n        }\n    }\n\n    const getSelectedTime = () => {\n        if (data.layersets.length > 0) {\n            return new Date(data.layersets[parseInt(index)].date).toLocaleString(\"lv\")\n        }\n        else {\n            return \"nav slāņu\"\n        }\n       \n    }\n\n    const geojsonurl = getGeoJsonUrl()\n    const getMap = () => {\n        switch (geojsonurl) {\n            case \"no-layers\":\n                return <div>Nav atrasti slāņi šīm laika periodam</div>\n            case \"not-found\":\n                return (\n                    <div>Slanis ar izvēlētajiem parametriem nav atrasts!</div>\n                )\n            default:\n                return <MapView geojsonUrl={geojsonurl} />\n        }\n    }\n    if (data)\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <NowPageMenu\n                        setPeriodFrom={setFrom}\n                        setPeriodTo={setTo}\n                        indexFrom={0}\n                        indexTo={data.layersets.length - 1}\n                        index={index}\n                        setIndex={(ev) => setIndex(ev.target.value)}\n                        layer={layer}\n                        setLayer={(ev) => setLayer(ev.target.value)}\n                        method={method}\n                        setMethod={(ev) => setMethod(ev.target.value)}\n                        selectedTime={getSelectedTime()}\n                    />\n                </div>\n                <div className=\"col-md-8\">{getMap()}</div>\n            </div>\n        )\n\n    return <div></div>\n}\n\nexport default NowPage\n","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport { Index, Menu, NowPage } from \"./components\"\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"container mb-3\">\n                <Menu />\n            </div>\n            <div className=\"container\">\n                <Switch>\n                    <Route path=\"/map/now\">\n                        <NowPage />\n                    </Route>\n                    <Route path=\"/\">\n                        <Index />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}